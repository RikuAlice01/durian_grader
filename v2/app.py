import customtkinter as ctk
from customtkinter import CTkImage, CTkFont
import tkinterdnd2
from tkinterdnd2 import DND_FILES
from tkinter import filedialog, messagebox
import cv2
from PIL import Image, ImageOps
import numpy as np
import os
from datetime import datetime
import threading

from utils.durian_grader import process_image

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
ctk.set_appearance_mode("System")
ctk.set_default_color_theme("green")

class DurianGraderApp(tkinterdnd2.TkinterDnD.Tk):
    def __init__(self):
        super().__init__()
        
        # Create a CustomTkinter frame as main container
        self.main_container = ctk.CTkFrame(self)
        self.main_container.pack(fill='both', expand=True)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        self.title("Enhanced Durian Grading System")
        self.geometry("1400x900")
        self.minsize(1200, 800)
        self.main_container.grid_columnconfigure(0, weight=1)
        self.main_container.grid_rowconfigure(0, weight=0)
        self.main_container.grid_rowconfigure(1, weight=0)
        self.main_container.grid_rowconfigure(2, weight=1)

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.image_paths = {
            'top': None,
            'segments_ab': None,
            'segments_bc': None,
            'segments_cd': None,
            'segments_de': None,
            'segments_ea': None
        }
        self.original_images = {}
        self.processed_images = {}
        self.analysis_results = {}
        self.result_history = []
        self.is_analyzing = False
        self.camera_active = {}
        self.camera_caps = {}

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        self.primary_color = "#4CAF50"
        self.secondary_color = "#689F38"
        self.header_font = CTkFont(family="Helvetica", size=28, weight="bold")
        self.button_font = CTkFont(family="Helvetica", size=12, weight="bold")
        self.text_font = CTkFont(family="Helvetica", size=11)
        self.result_font = CTkFont(family="Consolas", size=12)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self._create_header_frame()
        self._create_button_frame()
        self._create_content_frame()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.status_var = ctk.StringVar(value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.status_bar = ctk.CTkLabel(
            self.main_container, 
            textvariable=self.status_var, 
            font=("Helvetica", 12),
            height=25
        )
        self.status_bar.grid(row=3, column=0, sticky="ew", padx=10, pady=(0, 5))

    def _create_header_frame(self):
        self.header_frame = ctk.CTkFrame(self.main_container, fg_color=self.primary_color, corner_radius=0)
        self.header_frame.grid(row=0, column=0, sticky="ew")
        
        self.title_label = ctk.CTkLabel(
            self.header_frame, 
            text="üçà Enhanced AI Durian Grading System", 
            font=self.header_font,
            text_color="white"
        )
        self.title_label.pack(pady=15)

    def _create_button_frame(self):
        self.btn_frame = ctk.CTkFrame(self.main_container)
        self.btn_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.analyze_btn = ctk.CTkButton(
            self.btn_frame, 
            text="üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 
            command=self.analyze_all_images,
            state="disabled",
            font=self.button_font,
            height=40,
            fg_color=self.primary_color,
            hover_color=self.secondary_color
        )
        self.analyze_btn.pack(side="left", padx=10, pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.clear_btn = ctk.CTkButton(
            self.btn_frame, 
            text="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
            command=self.clear_all_data,
            font=self.button_font,
            height=40,
            fg_color="red",
            hover_color="darkred"
        )
        self.clear_btn.pack(side="left", padx=10, pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.save_btn = ctk.CTkButton(
            self.btn_frame, 
            text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", 
            command=self.save_results,
            state="disabled",
            font=self.button_font,
            height=40,
            fg_color=self.secondary_color,
            hover_color=self.primary_color
        )
        self.save_btn.pack(side="right", padx=10, pady=10)

    def _create_content_frame(self):
        self.content_frame = ctk.CTkFrame(self.main_container)
        self.content_frame.grid(row=2, column=0, sticky="nsew", padx=20, pady=(0, 10))
        self.content_frame.grid_columnconfigure(0, weight=2)
        self.content_frame.grid_columnconfigure(1, weight=1)
        self.content_frame.grid_rowconfigure(0, weight=1)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.notebook = ctk.CTkTabview(self.content_frame)
        self.notebook.grid(row=0, column=0, sticky="nsew", padx=(0, 10), pady=10)
        
        # ‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        self.notebook.add("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        self.notebook.add("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        
        self._create_image_input_tab()
        self._create_analysis_tab()
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.result_frame = ctk.CTkFrame(self.content_frame, corner_radius=10)
        self.result_frame.grid(row=0, column=1, sticky="nsew", pady=10)
        
        self._create_result_panel()

    def _create_image_input_tab(self):
        input_frame = self.notebook.tab("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û 6 ‡∏£‡∏π‡∏õ (2x3)
        input_frame.grid_columnconfigure((0, 1, 2), weight=1)
        input_frame.grid_rowconfigure((0, 1), weight=1)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        image_configs = [
            ("top", "‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 1: ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô", 0, 0),
            ("segments_ab", "‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 2: Segment A-B", 0, 1),
            ("segments_bc", "‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 3: Segment B-C", 0, 2),
            ("segments_cd", "‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 4: Segment C-D", 1, 0),
            ("segments_de", "‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 5: Segment D-E", 1, 1),
            ("segments_ea", "‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 6: Segment E-A", 1, 2)
        ]
        
        self.image_frames = {}
        self.image_labels = {}
        self.camera_buttons = {}
        self.file_buttons = {}
        
        for img_key, title, row, col in image_configs:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ
            frame = ctk.CTkFrame(input_frame, corner_radius=10)
            frame.grid(row=row, column=col, sticky="nsew", padx=5, pady=5)
            frame.grid_rowconfigure(1, weight=1)
            frame.grid_columnconfigure(0, weight=1)
            
            # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
            title_label = ctk.CTkLabel(frame, text=title, font=self.button_font)
            title_label.grid(row=0, column=0, pady=(10, 5))
            
            # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ
            img_display = ctk.CTkFrame(frame, fg_color=("gray90", "gray20"))
            img_display.grid(row=1, column=0, sticky="nsew", padx=10, pady=5)
            
            img_label = ctk.CTkLabel(
                img_display, 
                text="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", 
                font=self.text_font
            )
            img_label.pack(fill="both", expand=True)
            
            # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
            btn_frame = ctk.CTkFrame(frame)
            btn_frame.grid(row=2, column=0, sticky="ew", padx=10, pady=10)
            btn_frame.grid_columnconfigure((0, 1), weight=1)
            
            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
            file_btn = ctk.CTkButton(
                btn_frame, 
                text="üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
                command=lambda k=img_key: self.select_image_file(k),
                font=self.text_font,
                height=30
            )
            file_btn.grid(row=0, column=0, padx=(0, 5), sticky="ew")
            
            # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
            camera_btn = ctk.CTkButton(
                btn_frame, 
                text="üì∑ ‡∏Å‡∏•‡πâ‡∏≠‡∏á",
                command=lambda k=img_key: self.toggle_camera(k),
                font=self.text_font,
                height=30,
                fg_color="blue",
                hover_color="darkblue"
            )
            camera_btn.grid(row=0, column=1, padx=(5, 0), sticky="ew")
            
            # ‡πÄ‡∏Å‡πá‡∏ö reference
            self.image_frames[img_key] = frame
            self.image_labels[img_key] = img_label
            self.camera_buttons[img_key] = camera_btn
            self.file_buttons[img_key] = file_btn
            self.camera_active[img_key] = False
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ drag and drop
            self._setup_drag_drop_for_frame(img_display, img_key)

    def _create_analysis_tab(self):
        analysis_frame = self.notebook.tab("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• 2x3
        analysis_frame.grid_columnconfigure((0, 1, 2), weight=1)
        analysis_frame.grid_rowconfigure((0, 1), weight=1)
        
        self.analysis_labels = {}
        
        segments = ['A', 'B', 'C', 'D', 'E', 'F']
        positions = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]
        
        for segment, (row, col) in zip(segments, positions):
            frame = ctk.CTkFrame(analysis_frame, corner_radius=10)
            frame.grid(row=row, column=col, sticky="nsew", padx=5, pady=5)
            
            title = ctk.CTkLabel(frame, text=f"Segment {segment}", font=self.button_font)
            title.pack(pady=(10, 5))
            
            result_label = ctk.CTkLabel(
                frame, 
                text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", 
                font=self.text_font,
                wraplength=200
            )
            result_label.pack(fill="both", expand=True, padx=10, pady=10)
            
            self.analysis_labels[segment] = result_label

    def _create_result_panel(self):
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.result_title = ctk.CTkLabel(
            self.result_frame, 
            text="‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", 
            font=CTkFont(family="Helvetica", size=18, weight="bold")
        )
        self.result_title.pack(pady=(15,5), padx=10)
        
        # Textbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        self.result_text = ctk.CTkTextbox(
            self.result_frame, 
            font=self.result_font, 
            corner_radius=5,
            wrap="word"
        )
        self.result_text.pack(fill="both", expand=True, padx=15, pady=(5, 15))
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.result_text.insert("1.0", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        self.result_text.configure(state="disabled")

    def _setup_drag_drop_for_frame(self, frame, img_key):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ drag and drop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frame ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ"""
        frame.drop_target_register(DND_FILES)
        frame.dnd_bind('<<Drop>>', lambda event, key=img_key: self.drop_file(event, key))

    def drop_file(self, event, img_key):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå"""
        file_path = event.data.strip('{}').replace('"', '')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        file_extension = os.path.splitext(file_path)[1].lower()
        valid_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
        
        if file_extension in valid_extensions:
            self.image_paths[img_key] = file_path
            self.load_and_display_image(img_key, file_path)
            self.check_analyze_button_state()
        else:
            self.status_var.set(f"‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ {', '.join(valid_extensions)}")

    def select_image_file(self, img_key):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
        file_path = filedialog.askopenfilename(
            title=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {img_key}",
            filetypes=[("‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", "*.jpg *.png *.jpeg *.bmp")]
        )
        
        if file_path:
            self.image_paths[img_key] = file_path
            self.load_and_display_image(img_key, file_path)
            self.check_analyze_button_state()

    def toggle_camera(self, img_key):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        if not self.camera_active[img_key]:
            self.start_camera(img_key)
        else:
            self.stop_camera(img_key)

    def start_camera(self, img_key):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
        camera_index = self.select_camera()
        if camera_index is None:
            return
        
        try:
            cap = cv2.VideoCapture(camera_index)
            if not cap.isOpened():
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                return
            
            self.camera_caps[img_key] = cap
            self.camera_active[img_key] = True
            self.camera_buttons[img_key].configure(text="üì∑ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á", fg_color="red")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
            threading.Thread(target=self.camera_loop, args=(img_key,), daemon=True).start()
            
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á: {str(e)}")

    def stop_camera(self, img_key):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        self.camera_active[img_key] = False
        if img_key in self.camera_caps:
            self.camera_caps[img_key].release()
            del self.camera_caps[img_key]
        
        self.camera_buttons[img_key].configure(text="üì∑ ‡∏Å‡∏•‡πâ‡∏≠‡∏á", fg_color="blue")

    def select_camera(self):
        """‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        available_cameras = []
        for i in range(5):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á 5 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                available_cameras.append(i)
                cap.release()
        
        if not available_cameras:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            return None
        
        if len(available_cameras) == 1:
            return available_cameras[0]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
        camera_window = ctk.CTkToplevel(self)
        camera_window.title("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        camera_window.geometry("300x200")
        camera_window.transient(self)
        camera_window.grab_set()
        
        selected_camera = None
        
        def select_cam(index):
            nonlocal selected_camera
            selected_camera = index
            camera_window.destroy()
        
        ctk.CTkLabel(camera_window, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ:", font=self.button_font).pack(pady=20)
        
        for i, cam_index in enumerate(available_cameras):
            btn = ctk.CTkButton(
                camera_window, 
                text=f"‡∏Å‡∏•‡πâ‡∏≠‡∏á {cam_index}",
                command=lambda idx=cam_index: select_cam(idx)
            )
            btn.pack(pady=5)
        
        self.wait_window(camera_window)
        return selected_camera

    def camera_loop(self, img_key):
        """‡∏•‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        while self.camera_active[img_key] and img_key in self.camera_caps:
            ret, frame = self.camera_caps[img_key].read()
            if ret:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                self.display_camera_frame(img_key, frame_rgb)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û (overlay)
                self.add_capture_button(img_key, frame_rgb)
            
            # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            self.after(30)  # ~33 FPS

    def display_camera_frame(self, img_key, frame):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        try:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            height, width = frame.shape[:2]
            max_size = 200
            
            if width > height:
                new_width = max_size
                new_height = int(height * max_size / width)
            else:
                new_height = max_size
                new_width = int(width * max_size / height)
            
            frame_resized = cv2.resize(frame, (new_width, new_height))
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PIL Image
            img_pil = Image.fromarray(frame_resized)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á CTkImage
            img_ctk = CTkImage(light_image=img_pil, dark_image=img_pil, size=(new_width, new_height))
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
            self.image_labels[img_key].configure(image=img_ctk, text="")
            self.image_labels[img_key].image = img_ctk
            
        except Exception as e:
            print(f"Error displaying camera frame: {e}")

    def add_capture_button(self, img_key, frame):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if not hasattr(self, 'capture_buttons'):
            self.capture_buttons = {}
        
        if img_key not in self.capture_buttons:
            capture_btn = ctk.CTkButton(
                self.image_labels[img_key],
                text="üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
                command=lambda: self.capture_image(img_key, frame),
                width=80,
                height=30,
                font=CTkFont(size=10)
            )
            capture_btn.place(relx=0.5, rely=0.9, anchor="center")
            self.capture_buttons[img_key] = capture_btn

    def capture_image(self, img_key, frame):
        """‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
        self.original_images[img_key] = frame.copy()
        
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
        self.stop_camera(img_key)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢
        self.display_captured_image(img_key, frame)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.check_analyze_button_state()
        
        self.status_var.set(f"‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {img_key} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    def display_captured_image(self, img_key, frame):
        """‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
            height, width = frame.shape[:2]
            max_size = 200
            
            if width > height:
                new_width = max_size
                new_height = int(height * max_size / width)
            else:
                new_height = max_size
                new_width = int(width * max_size / height)
            
            frame_resized = cv2.resize(frame, (new_width, new_height))
            img_pil = Image.fromarray(frame_resized)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û
            img_with_border = ImageOps.expand(img_pil, border=3, fill='green')
            
            img_ctk = CTkImage(light_image=img_with_border, dark_image=img_with_border, 
                             size=(new_width + 6, new_height + 6))
            
            self.image_labels[img_key].configure(image=img_ctk, text="")
            self.image_labels[img_key].image = img_ctk
            
            # ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
            if hasattr(self, 'capture_buttons') and img_key in self.capture_buttons:
                self.capture_buttons[img_key].destroy()
                del self.capture_buttons[img_key]
                
        except Exception as e:
            print(f"Error displaying captured image: {e}")

    def load_and_display_image(self, img_key, file_path):
        """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            img = cv2.imread(file_path)
            img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            self.original_images[img_key] = img_rgb
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            self.display_image_in_label(img_key, img_rgb)
            
            self.status_var.set(f"‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û {img_key} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
        except Exception as e:
            self.status_var.set(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {str(e)}")

    def display_image_in_label(self, img_key, img_array):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô label"""
        try:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
            height, width = img_array.shape[:2]
            max_size = 200
            
            if width > height:
                new_width = max_size
                new_height = int(height * max_size / width)
            else:
                new_height = max_size
                new_width = int(width * max_size / height)
            
            img_resized = cv2.resize(img_array, (new_width, new_height))
            img_pil = Image.fromarray(img_resized)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏ö
            img_with_border = ImageOps.expand(img_pil, border=2, fill='blue')
            
            img_ctk = CTkImage(light_image=img_with_border, dark_image=img_with_border, 
                             size=(new_width + 4, new_height + 4))
            
            self.image_labels[img_key].configure(image=img_ctk, text="")
            self.image_labels[img_key].image = img_ctk
            
        except Exception as e:
            print(f"Error displaying image: {e}")

    def check_analyze_button_state(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ
        has_images = any(img_key in self.original_images for img_key in self.image_paths.keys())
        
        if has_images:
            self.analyze_btn.configure(state="normal")
        else:
            self.analyze_btn.configure(state="disabled")

    def analyze_all_images(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        if self.is_analyzing:
            return
        
        self.is_analyzing = True
        self.analyze_btn.configure(state="disabled", text="üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å
        threading.Thread(target=self._analyze_thread, daemon=True).start()

    def _analyze_thread(self):
        """Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            results = {}
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ
            for img_key, img_array in self.original_images.items():
                if img_array is not None:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                    temp_path = f"temp_{img_key}.jpg"
                    img_bgr = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
                    cv2.imwrite(temp_path, img_bgr)
                    
                    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    processed_img, text_result = process_image(temp_path)
                    
                    if processed_img is not None:
                        self.processed_images[img_key] = processed_img
                        results[img_key] = text_result
                    
                    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                    if os.path.exists(temp_path):
                        os.remove(temp_path)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ segment
            segment_distances = self._calculate_segment_distances()
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡πÉ‡∏ô main thread
            self.after(0, lambda: self._update_analysis_results(results, segment_distances))
            
        except Exception as e:
            self.after(0, lambda: self._handle_analysis_error(str(e)))

    def _calculate_segment_distances(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ segment"""
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì - ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        segment_data = {
            'A': {'images': ['segments_ab', 'segments_ea'], 'distance': 0},
            'B': {'images': ['segments_ab', 'segments_bc'], 'distance': 0},
            'C': {'images': ['segments_bc', 'segments_cd'], 'distance': 0},
            'D': {'images': ['segments_cd', 'segments_de'], 'distance': 0},
            'E': {'images': ['segments_de', 'segments_ea'], 'distance': 0}
        }
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á (‡∏à‡∏∏‡∏î‡πÅ‡∏î‡∏á) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        for segment, data in segment_data.items():
            distances = []
            for img_key in data['images']:
                if img_key in self.processed_images:
                    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
                    # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û
                    distance = np.random.uniform(10, 50)  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                    distances.append(distance)
            
            if distances:
                data['distance'] = np.mean(distances)
        
        return segment_data

    def _update_analysis_results(self, results, segment_distances):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô UI"""
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        for segment, data in segment_distances.items():
            if segment in self.analysis_labels:
                result_text = f"‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á: {data['distance']:.2f} px\n"
                result_text += f"‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {', '.join(data['images'])}"
                self.analysis_labels[segment].configure(text=result_text)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏£‡∏ß‡∏°
        self.result_text.configure(state="normal")
        self.result_text.delete("1.0", "end")
        
        current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        summary = f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {current_time}\n\n"
        summary += "=== ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á ===\n\n"
        
        for segment, data in segment_distances.items():
            summary += f"Segment {segment}: {data['distance']:.2f} px\n"
        
        summary += "\n=== ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ ===\n\n"
        for img_key, result in results.items():
            summary += f"{img_key}:\n{result}\n\n"
        
        self.result_text.insert("1.0", summary)
        self.result_text.configure(state="disabled")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        self.result_history.append({
            'time': current_time,
            'segment_distances': segment_distances,
            'individual_results': results
        })
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        self.save_btn.configure(state="normal")
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.analyze_btn.configure(state="normal", text="üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.is_analyzing = False
        self.status_var.set("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")

    def _handle_analysis_error(self, error_msg):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        self.result_text.configure(state="normal")
        self.result_text.delete("1.0", "end")
        self.result_text.insert("1.0", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:\n{error_msg}")
        self.result_text.configure(state="disabled")
        
        self.analyze_btn.configure(state="normal", text="üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.is_analyzing = False
        self.status_var.set("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

    def clear_all_data(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for img_key in list(self.camera_active.keys()):
            if self.camera_active[img_key]:
                self.stop_camera(img_key)
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        self.image_paths = {key: None for key in self.image_paths.keys()}
        self.original_images.clear()
        self.processed_images.clear()
        self.analysis_results.clear()
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï UI
        for img_key, label in self.image_labels.items():
            label.configure(image=None, text="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        
        for segment, label in self.analysis_labels.items():
            label.configure(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        
        self.result_text.configure(state="normal")
        self.result_text.delete("1.0", "end")
        self.result_text.insert("1.0", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        self.result_text.configure(state="disabled")
        
        # ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°
        self.analyze_btn.configure(state="disabled")
        self.save_btn.configure(state="disabled")
        
        self.status_var.set("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    def save_results(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        if not self.result_history:
            return
        
        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt")],
                title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write("===== ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö 6 ‡∏£‡∏π‡∏õ =====\n\n")
                    
                    for idx, entry in enumerate(self.result_history, 1):
                        file.write(f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {idx}\n")
                        file.write(f"‡πÄ‡∏ß‡∏•‡∏≤: {entry['time']}\n\n")
                        
                        file.write("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á:\n")
                        for segment, data in entry['segment_distances'].items():
                            file.write(f"  Segment {segment}: {data['distance']:.2f} px\n")
                        
                        file.write("\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ:\n")
                        for img_key, result in entry['individual_results'].items():
                            file.write(f"  {img_key}: {result}\n")
                        
                        file.write("-" * 60 + "\n\n")
                
                self.status_var.set(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á {os.path.basename(file_path)} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            self.status_var.set(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {str(e)}")

    def on_closing(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for img_key in list(self.camera_active.keys()):
            if self.camera_active[img_key]:
                self.stop_camera(img_key)
        
        self.destroy()


if __name__ == "__main__":
    app = DurianGraderApp()
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.mainloop()